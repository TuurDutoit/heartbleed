const BufferReader = require('buffer-reader');

const messageParsers = new Map();
messageParsers.set(0x15, parseAlertMessage);
messageParsers.set(0x16, parseHandshakeMessage);

const handshakeContentParsers = new Map();
handshakeContentParsers.set(0x01, parseClientHello);
handshakeContentParsers.set(0x02, parseServerHello);

function parseAlertMessage(buffer) {
    return {
        level: buffer.nextUInt8(),
        description: buffer.nextUInt8(),
    };
}

function parseHandshakeMessage(buffer) {
    const message = {
        type: buffer.nextUInt8(),
        length: parseInt(buffer.nextBuffer(3).toString('hex'), 16),
    };

    const parseHandshakeContent = handshakeContentParsers.get(message.type);
    let content;

    if(parseHandshakeContent) {
        content = parseHandshakeContent(buffer);
        message.content = content;
    }
    else {
        console.log('WARNING Unknown handshake type: 0x' + message.type.toString(16));
    }

    return message;
}

function parseClientHello(buffer) {
    const content = {
        version: buffer.nextUInt16BE(),
        timestamp: parseTimestamp(buffer),
        random: buffer.nextBuffer(28),
        sessionId: parseSessionId(buffer),
        cipherSuites: parseCipherSuites(buffer),
        compressionMethods: parseCompressionMethods(buffer),
        extensions: parseExtensions(buffer),
    };

    return content;
}

function parseServerHello(buffer) {
    return {
        version: buffer.nextUInt16BE(),
        timestamp: parseTimestamp(buffer),
        random: buffer.nextBuffer(28),
        sessionId: parseSessionId(buffer),
        cipherSuite: buffer.nextUInt16BE(),
        compressionMethod: buffer.nextUInt8(),
    }
}

function parseTimestamp(buffer) {
    return new Date(buffer.nextUInt32BE() * 1000);
}

function parseSessionId(buffer) {
    const length = buffer.nextUInt8();
    return buffer.nextBuffer(length);
}

function parseCipherSuites(buffer) {
    const length = buffer.nextUInt16BE() / 2;
    const suites = [];

    for(let i = 0; i < length; i++) {
        suites.push(buffer.nextUInt16BE());
    }

    return suites;
}

function parseCompressionMethods(buffer) {
    const length = buffer.nextUInt8();
    const methods = [];

    for (let i = 0; i < length; i++) {
        methods.push(buffer.nextUInt8());
    }

    return methods;
}

function parseExtensions(buffer) {

}

module.exports = function(buf) {
    const buffer = new BufferReader(buf);
    const record = {
        type: buffer.nextUInt8(),
        version: buffer.nextUInt16BE(),
        length: buffer.nextUInt16BE(),
    }

    const parseMessage = messageParsers.get(record.type);
    let message;

    if(parseMessage) {
        message = parseMessage(buffer);
        record.message = message;
    }
    else {
        console.log('WARNING Unknown message type: 0x' + record.type.toString(16));
    }

    return record;
}